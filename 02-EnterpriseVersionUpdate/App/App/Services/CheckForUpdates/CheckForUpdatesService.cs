using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Xamarin.Forms;

namespace App.Services.CheckForUpdates
{
    public class CheckForUpdatesService
    {
        public CheckForUpdatesService()
        {
            AppVersionService = DependencyService.Get<IAppVersionService>();
        }

        public IsUpdateAvailableResponse IsUpdateAvailable()
        {
            // This response could be generated by hitting a web service call instead of using our private mock method
            var latestVersionResponse = CreateMockLatestVersionResponse();

            // Strip non-numeric characters from version info
            var digitsRegex = new Regex(@"[^\d]");
            var latestVersionDigitsOnly = ToDigitsOnly(latestVersionResponse.LatestVersion);
            var currentVersionDigitsOnly = ToDigitsOnly(AppVersionService.Version);

            // Convert strings to ints for numerical comparison to determine if a newer version is available
            if (int.TryParse(latestVersionDigitsOnly, out int latestVersionNumber) &&
                int.TryParse(currentVersionDigitsOnly, out int currentVersionNumber))

            {
                return new IsUpdateAvailableResponse(latestVersionNumber > currentVersionNumber,
                                                     latestVersionResponse.IsUpdateRequired);
            }

            return new IsUpdateAvailableResponse();
        }

        // This response could be generated by hitting a web service call instead of our private mock method
        public UpdateChangesResponse GetVersionChanges()
        {
            var updateChangesResponse = CreateMockUpdateChangesResponse();

            // Iterate through the changes and remove those for versions older than the currently installed one.
            // This could be handled in a web service request by passing the currently installed version number in the request.
            if (int.TryParse(ToDigitsOnly(updateChangesResponse.CurrentVersion), out int currentVersionDigitsOnly))
            {
                updateChangesResponse.VersionChanges = updateChangesResponse.VersionChanges.Where((versionChanges) =>
                {
                    var include = false;
                    if (int.TryParse(ToDigitsOnly(versionChanges.Version), out int changesVersionDigitsOnly))
                    {
                        include = changesVersionDigitsOnly > currentVersionDigitsOnly;
                    }
                    return include;
                }).ToList();
            }

            return updateChangesResponse;
        }

        private IAppVersionService AppVersionService { get; }

        private string ToDigitsOnly(string source)
        {
            var digitsRegex = new Regex(@"[^\d]");
            return digitsRegex.Replace(source, "");
        }

        private LatestVersionResponse CreateMockLatestVersionResponse()
        {
            return new LatestVersionResponse
            {
                LatestVersion = "1.2.3.4",
                IsUpdateRequired = false
            };
        }

        private UpdateChangesResponse CreateMockUpdateChangesResponse()
        {
            var result = new UpdateChangesResponse
            {
                CurrentVersion = AppVersionService.Version,
                LatestVersion = "1.2.3.4",
                LatestVersionReleaseDate = DateTime.UtcNow,
                // You should update the URI to point to your manifest.plist file. It must be located on an HTTPS connection
                UpdateLinkUri = "itms-services://?action=download-manifest&url=https://example.com/manifest.plist",
                VersionChanges = new List<VersionDetails>
                {
                    new VersionDetails
                    {
                        Version = "1.2.3.4",
                        ReleaseDate = DateTime.UtcNow,
                        Changes = new List<string>
                        {
                            "A really cool feature",
                            "Another really cool feature",
                            "Yet another really cool feature"
                        }
                    },
                    new VersionDetails
                    {
                        Version = "1.1.2.3",
                        ReleaseDate = DateTime.UtcNow.Subtract(TimeSpan.FromDays(1)),
                        Changes = new List<string>
                        {
                            "A cool feature",
                            "Another cool feature",
                            "Yet another cool feature"
                        }
                    },
                    new VersionDetails
                    {
                        Version = "1.0.1.2",
                        ReleaseDate = DateTime.UtcNow.Subtract(TimeSpan.FromDays(2)),
                        Changes = new List<string>
                        {
                            "A feature",
                            "Another feature",
                            "Yet another feature"
                        }
                    }
                }
            };

            return result;
        }
    }
}
